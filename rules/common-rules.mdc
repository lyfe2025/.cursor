---
alwaysApply: true
---
# Cursor 核心运行时规则

> **极简高效版本** - 仅包含每次对话必需的核心规则
> **详细说明**：请参考 `detailed-guides.mdc` 获取完整的配置指导和使用说明

---

## 🚀 快速启动检查

### 状态检查（仅首次或变更时）
```javascript
// 伪代码：智能状态检查逻辑
if (!exists('.cursor/project-initialized') || user_request_init) {
  // 引用：project-initialization.mdc
  show_initialization_prompt();
} else if (tech_stack_changed()) {
  // 引用：技术栈更新机制
  show_update_prompt();
} else {
  // 直接进入协作模式
  proceed_with_collaboration();
}
```

---

## ⚡ 核心执行规则

### 1. 文件大小强制限制
- **500行铁律**：任何文件 ≥500行 → 立即强制分离
- **检查时机**：代码修改前必须检查行数
- **执行策略**：超限 → 停止操作 → 强制分离

### 2. 智能决策边界
```markdown
立即执行: bug修复、格式化、安全修复、性能优化
需要确认: 新功能、API变更、依赖变更
必须审查: 业务逻辑、数据库变更、权限变更
禁止自主: 生产部署、数据删除、破坏性操作
```

### 3. 专用规则文件引用
```markdown
协作交互 → collaboration-standards.mdc
项目管理 → project-management-practices.mdc  
规则管理 → rule-file-management.mdc
初始化流程 → project-initialization.mdc
技术栈规则 → <tech-stack>-v<version>-standards.mdc
```

### 4. 问题处理快速决策
```markdown
第1次问题: 正常解决
第2次重复: 启动标准复盘 → 记录到docs/问题解决/
第3次失败: 强制深度复盘 → 风险等级提升 → 专家介入
```

### 5. Git操作禁令
**绝对禁止**：执行任何 `git` 命令（add, commit, push 等）
**用户职责**：所有版本控制操作由用户完成

---

## 🎯 快速引用表

### 常见场景 → 规则文件映射
| 场景 | 引用文件 | 加载时机 |
|------|----------|----------|
| 首次协作 | project-initialization.mdc | 检测到未初始化 |
| 协作交互 | collaboration-standards.mdc | 需要格式化回复时 |
| 项目管理 | project-management-practices.mdc | 涉及环境/团队问题 |
| 技术栈问题 | tech-stack专用规则 | 检测到对应技术栈 |
| 规则管理 | rule-file-management.mdc | 需要生成新规则时 |

### 质量标准快速判断
```markdown
生产环境: 最高标准 + 完整测试 + 详细文档
开发环境: 平衡质量效率 + 重点功能
原型环境: 快速验证 + 可接受技术债务
```

---

## 📋 核心价值观（快速决策原则）

1. **规则遵循 > 开发便利** - 500行限制不可违背
2. **质量 > 速度** - 稳定性优先
3. **安全 > 便利** - 安全选择优先
4. **团队协作 > 个人效率** - 代码可维护性优先

---

## 🔄 性能优化机制

### 条件加载策略
- **状态缓存**：初始化状态缓存1小时，避免重复检查
- **按需引用**：仅在明确需要时加载专用规则文件
- **快速跳过**：已初始化且无变更 → 直接进入协作模式

### 智能触发机制
```markdown
触发初始化检查:
- 首次对话
- 用户明确要求
- 检测到 package.json 等关键文件变更
- 距离上次检查超过24小时

跳过初始化检查:
- .cursor/project-initialized 存在且有效
- 技术栈无变更
- 用户在同一会话中继续对话
```

---

**注意**：本文件专注于运行时性能优化，详细说明和配置指导请参考对应的专用规则文件。